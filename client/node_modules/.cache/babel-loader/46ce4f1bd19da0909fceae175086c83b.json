{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\julie\\\\Desktop\\\\Rice Class\\\\shop-shop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\julie\\\\Desktop\\\\Rice Class\\\\shop-shop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Link,useParams}from'react-router-dom';import{useQuery}from'@apollo/client';import{useStoreContext}from\"../utils/GlobalState\";import{REMOVE_FROM_CART,UPDATE_CART_QUANTITY,ADD_TO_CART,UPDATE_PRODUCTS}from\"../utils/actions\";import{QUERY_PRODUCTS}from'../utils/queries';import spinner from'../assets/spinner.gif';import Cart from\"../components/Cart\";import{idbPromise}from\"../utils/helpers\";function Detail(){var _useStoreContext=useStoreContext(),_useStoreContext2=_slicedToArray(_useStoreContext,2),state=_useStoreContext2[0],dispatch=_useStoreContext2[1];var _useParams=useParams(),id=_useParams.id;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),currentProduct=_useState2[0],setCurrentProduct=_useState2[1];var _useQuery=useQuery(QUERY_PRODUCTS),loading=_useQuery.loading,data=_useQuery.data;var products=state.products,cart=state.cart;var addToCart=function addToCart(){var itemInCart=cart.find(function(cartItem){return cartItem._id===id;});if(itemInCart){dispatch({type:UPDATE_CART_QUANTITY,_id:id,purchaseQuantity:parseInt(itemInCart.purchaseQuantity)+1});// if we're updating quantity, use existing item data and increment purchaseQuantity value by one\nidbPromise(\"cart\",\"put\",_objectSpread(_objectSpread({},itemInCart),{},{purchaseQuantity:parseInt(itemInCart.purchaseQuantity)+1}));}else{dispatch({type:ADD_TO_CART,product:_objectSpread(_objectSpread({},currentProduct),{},{purchaseQuantity:1})});// if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\nidbPromise(\"cart\",\"put\",_objectSpread(_objectSpread({},currentProduct),{},{purchaseQuantity:1}));}};var removeFromCart=function removeFromCart(){dispatch({type:REMOVE_FROM_CART,_id:currentProduct._id});// upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\nidbPromise(\"cart\",\"delete\",_objectSpread({},currentProduct));};useEffect(function(){// already in global store\nif(products.length){setCurrentProduct(products.find(function(product){return product._id===id;}));}// retrieved from server\nelse if(data){dispatch({type:UPDATE_PRODUCTS,products:data.products});data.products.forEach(function(product){idbPromise(\"products\",\"put\",product);});}// get cache from idb\nelse if(!loading){idbPromise(\"products\",\"get\").then(function(indexedProducts){dispatch({type:UPDATE_PRODUCTS,products:indexedProducts});});}},[products,data,loading,dispatch,id]);return/*#__PURE__*/React.createElement(React.Fragment,null,currentProduct?/*#__PURE__*/React.createElement(\"div\",{className:\"container my-1\"},/*#__PURE__*/React.createElement(Link,{to:\"/\"},\"\\u2190 Back to Products\"),/*#__PURE__*/React.createElement(\"h2\",null,currentProduct.name),/*#__PURE__*/React.createElement(\"p\",null,currentProduct.description),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Price:\"),\"$\",currentProduct.price,\" \",/*#__PURE__*/React.createElement(\"button\",{onClick:addToCart},\"Add to cart\"),/*#__PURE__*/React.createElement(\"button\",{disabled:!cart.find(function(p){return p._id===currentProduct._id;}),onClick:removeFromCart},\"Remove from Cart\")),/*#__PURE__*/React.createElement(\"img\",{src:\"/images/\".concat(currentProduct.image),alt:currentProduct.name})):null,loading?/*#__PURE__*/React.createElement(\"img\",{src:spinner,alt:\"loading\"}):null,/*#__PURE__*/React.createElement(Cart,null));}export default Detail;","map":{"version":3,"sources":["C:/Users/julie/Desktop/Rice Class/shop-shop/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","useStoreContext","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","QUERY_PRODUCTS","spinner","Cart","idbPromise","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","removeFromCart","length","forEach","then","indexedProducts","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport Cart from \"../components/Cart\";\nimport { idbPromise } from \"../utils/helpers\";\n\n\nfunction Detail() {\nconst [state, dispatch] = useStoreContext();\nconst { id } = useParams();\n\nconst [currentProduct, setCurrentProduct] = useState({});\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\nconst { products, cart  } = state;\n\nconst addToCart = () => {\n  const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n    });\n    // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n    idbPromise(\"cart\", \"put\", {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 },\n    });\n    // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n    idbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\n  }\n};\n\nconst removeFromCart = () => {\n  dispatch({\n    type: REMOVE_FROM_CART,\n    _id: currentProduct._id,\n  });\n\n  // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n  idbPromise(\"cart\", \"delete\", { ...currentProduct });\n};\n\n\nuseEffect(() => {\n  // already in global store\n  if (products.length) {\n    setCurrentProduct(products.find((product) => product._id === id));\n  }\n  // retrieved from server\n  else if (data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products,\n    });\n\n    data.products.forEach((product) => {\n      idbPromise(\"products\", \"put\", product);\n    });\n  }\n  // get cache from idb\n  else if (!loading) {\n    idbPromise(\"products\", \"get\").then((indexedProducts) => {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: indexedProducts,\n      });\n    });\n  }\n}, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{\" \"}\n            <button onClick={addToCart}>Add to cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}